#명함의 길이를 담은 2차원 배열을 입력받고, 모든 명함을 보관하기 위한 지갑의 최소넓이를 구하는 문제이다.
#명합을 눕혀서 보관형태를 바꿀 수 있다.(가로, 세로 맞변환)

def solution(sizes):
    max_w = 0   #최대 너비(가로)
    max_h = 0   #최대 높이(세로)
    for w, h in sizes:  #2차원 배열의 모든 요소 확인.
        if w < h:   #가로, 세로 바뀐다해도 최소 넓이는 바뀌지 않기 때문에, 너비는 무조건 높이보다 크다고 조건 설정을 한다면, 최댓값의 후보들이 모두 너비로 가기 때문에 최소 넓이를 구하기 수월해진다.(반대로도 가능)
            w, h = h, w #조건에 부합한다면 그 배열의 높이, 너비를 서로 교환한다.
        max_w = max(max_w, w)   #for문이기 때문에 처음은 수를 그냥 대입하고, 그다음 반복부터 값을 비교하면서 큰 값이 나오면 바꿔준다.
        max_h = max(max_h, h)
    return max_w * max_h    #높이와 너비의 최댓값을 곱해서 명합지갑의 최소 넓이를 반환한다.